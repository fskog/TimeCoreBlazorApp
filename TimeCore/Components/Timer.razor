@namespace TimeCore.Components
@using TimeCore.Services
@using MatBlazor
@inject TimerService timer

<div class="alert alert-secondary mt-4 pl-3" role="alert">
    <div class="mb-3">
        <button class=@(timer.IsRunning ? "btn btn-danger" : "btn btn-success") @onclick=ToggleTimer>@(timer.IsRunning ? "Stop" : "Start")</button>

        <span class="display-1 badge @(timer.IsRunning ? "badge-primary" : "badge-seconday") badge-pill">
            <TimeElapsed />
        </span>
        <select class="col-auto custom-select bg-transparent w-auto border-0" id="category" @bind=SelectedCategory>
            <option value=""></option>
            @foreach (var category in timer.GetAllCategories())
            {
                <option value="@category.Key">@category.Value</option>
            }
        </select>
        <input type="text" class="col-auto border-bottom border-top-0 border-left-0 border-right-0 border-dark form-control mb-1 w-auto bg-transparent"
               style="border-style: dotted;" placeholder="(no description)" @bind-value="@Title" />
    </div>
    <div class="mb-3 row d-inline-flex">
        <div class="flex">
            <MatDatePicker @bind-Value=@StartTime
                           Format="t"
                           Enable24hours=true
                           EnableTime=true Disabled=(!timer.IsRunning)></MatDatePicker>
            <span>@_startTime.ToString()</span>

        </div>
        <div class="flex-column">
            <MatDatePicker @bind-Value=@EndTime
                           Format="t"
                           Enable24hours=true
                           EnableTime=true Disabled=(timer.IsRunning)></MatDatePicker>
            <span>@_startTime.ToString()</span>

        </div>
    </div>
</div>

@code {

    public void OnTimerUpdated(object sender, EventArgs e)
    {
        StateHasChanged();
    }




    public DateTime _startTime;
    public DateTime _endTime;

    public DateTime StartTime
    {
        get => _startTime;
        set
        {
            _startTime = value;
            Task.Run(UpdateStartTime);

        }
    }

    public DateTime EndTime
    {
        get
        {
            return _endTime;
        }

        set
        {
            _endTime = value;
            Task.Run(UpdateEndTime);

        }
    }


    string title = "";
    string _selectedCategory = "";

    string SelectedCategory
    {
        get => _selectedCategory;
        set
        {
            _selectedCategory = value;
            Task.Run(UpdateCategory);

        }
    }

    string Title
    {
        get { return timer.Title; }
        set
        {
            Console.WriteLine($"Timer.razor: Title prop Set fired with value: {value}");
            timer.SetTitle(value);
        }
    }




    protected override async Task OnInitializedAsync()
    {
        timer.TimerWasUpdated += OnTimerUpdated;
        _startTime = timer.GetStartTime();
        _endTime = timer.GetEndTime();
        _selectedCategory = timer.CategorySystemId;
    }

    private void ToggleTimer()
    {
        timer.ToggleRunning();
        StateHasChanged();
    }

    private void UpdateStartTime()
    {
        timer.SetStartTime(_startTime);
        _startTime = timer.GetStartTime();
    }

    private void UpdateEndTime()
    {
        timer.SetStartTime(_endTime);
        _startTime = timer.GetEndTime();
    }
    private void UpdateCategory()
    {
        timer.SetCategory(_selectedCategory);
        _selectedCategory = timer.CategorySystemId;
    }

    private void UpdateTitle()
    {
        timer.SetTitle(title);
        title = timer.Title;
    }
}


