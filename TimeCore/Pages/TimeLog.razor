@page "/log"
@using TimeCore.Models
@inject Services.TimeLogService timeLogService
@inject Services.CategoryService categoryService

<h3>Time log</h3>

<div class="mt-3 mb-3">

    <MiniDayPicker Amount="3" SelectedDate=@DisplayDate OnValueChanged=@UpdateDisplayedLogs IncludeAll=true />
</div>

<div class="list-group">
    @foreach (var time in timeLogItems)
    {
        var daysAgo = (DateTime.Now - time.StartTime).Days;
        var daysAgoString = daysAgo == 0 ? "Today" : daysAgo == 1 ? "Yesterday" : $"{daysAgo} days ago";
        var elapsed = (time.EndTime - time.StartTime);
        var elapsedFormatted = elapsed.ToString((elapsed.Hours > 0 ? "hh' h '" : "") + (elapsed.Minutes > 0 ? "m' min '" : "") + "s' sec '");
        var category = categoryService.Get(time.CategorySystemId)?.Name ?? "";
        <a @key=time.SystemId href="#" class="list-group-item list-group-item-action list-group-item-info flex-column align-items-start">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1">@time.Title</h5>
                <small>
                    <span class="badge badge-pill badge-light">@category</span>
                </small>
                <small>@daysAgoString</small>
            </div>
            <p class="mb-1">
                <span class="badge badge-primary badge-pill">@elapsedFormatted</span>
            </p>
            <small>From @time.StartTime.ToString("t") @time.StartTime.ToString("M")</small>
            <small>Until @time.EndTime.ToString("t") @time.EndTime.ToString("M")</small>
        </a>
    }
    @if (!timeLogItems.Any())
    {
        <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1">Nothing here yet</h5>
                <small></small>
            </div>
            <p class="mb-1">
                This is where you will see a list of your past times.
                They will be added here after you stop a timer.
            </p>
        </a>
    }
</div>


@code {
    public DateTime DisplayDate = DateTime.MinValue;
    //DateTime DisplayDate
    //{

    //    get { return _displayDate; }
    //    set {
    //        _displayDate = value;
    //    }
    //}
    List<TimeLogItem> timeLogItems;

    protected override async Task OnInitializedAsync()
    {
        timeLogItems = timeLogService.GetAll();
    }

    private void UpdateDisplayedLogs(DateTime date)
    {
        Console.WriteLine($"UpdateDisplaedLogs called with date {date.ToString()}");
        DisplayDate = date;
        timeLogItems = timeLogService.GetInterval(DisplayDate.Date, DisplayDate.Date.AddDays(1).AddMilliseconds(-1));
    }

}